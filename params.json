{
  "name": "Argos3",
  "tagline": "A parallel, multi-engine simulator for heterogeneous swarm robotics",
  "body": "ARGoS README\r\n=============\r\n:Author: Carlo Pinciroli\r\n:Email:  ilpincy@gmail.com\r\n:Date:   February 27th, 2015\r\n\r\nWhat is ARGoS?\r\n---------------\r\n\r\nARGoS is a physics-based simulator designed to simulate large-scale robot\r\nswarms. Benchmark results show that ARGoS can perform physics-accurate\r\nsimulation involving thousands of robots in a fraction of real time.\r\nARGoS' main features are:\r\n\r\n* Multi-threaded and deeply modular architecture, more flexible than any\r\n  simulator with equivalent features;\r\n* The possibility to run multiple physics engines at the same time;\r\n* The possibility to divide the physical space in region, and assign different\r\n  regions to different physics engines.\r\n\r\nStarting from version 3, ARGoS is released under the terms of the MIT license.\r\n\r\nDownloading ARGoS\r\n------------------\r\n\r\nYou can download a binary package of ARGoS from\r\nhttp://www.argos-sim.info/download.php. Alternatively, you\r\ncan download the development sources through git:\r\n\r\n $ git clone https://github.com/ilpincy/argos3.git argos3\r\n\r\nCompiling ARGoS\r\n----------------\r\n\r\nRequirements\r\n~~~~~~~~~~~~\r\n\r\nIf you downloaded the sources of ARGoS and want to compile its code, you need:\r\n\r\n* A UNIX system (Linux or MacOSX; Microsoft Windows is not supported)\r\n* _g++_ >= 4.3 (on Linux)\r\n* _clang_ >= 3.1 (on MacOSX)\r\n* _cmake_ >= 2.6\r\n\r\nIf you want to compile the simulator, you need:\r\n\r\n* _FreeImage_ >= 3.15\r\n\r\nThe OpenGL-based graphical visualization is compiled only if the following\r\nlibraries are found:\r\n\r\n* _Qt_ >= 4.6\r\n* _freeglut_ >= 2.6.0\r\n* _libxi-dev_ (on Ubuntu and other Debian-based systems)\r\n* _libxmu-dev_ (on Ubuntu and other Debian-based systems)\r\n\r\nIf you want to create the Lua wrapper you need:\r\n\r\n* _lua_ == 5.2\r\n\r\nIf you want to create the documentation you need:\r\n\r\n* To create the API:\r\n** _Doxygen_ >= 1.7.3\r\n** _Graphviz/dot_ >= 2.28\r\n* To create the HTML version of this README:\r\n** _asciidoc_ >= 8.6.2\r\n\r\nDebian\r\n^^^^^^\r\n\r\nOn Debian, you can install all of the necessary requirements\r\nwith the following command:\r\n\r\n $ sudo apt-get install libfreeimage-dev libfreeimageplus-dev libqt4-dev \\\r\n   freeglut3-dev libxi-dev libxmu-dev liblua5.2-dev lua5.2 \\\r\n   doxygen graphviz graphviz-dev asciidoc\r\n\r\nOpenSuse\r\n^^^^^^^^\r\n\r\nOn openSUSE 13.2, you can install all of the necessary requirements\r\nwith the following commands:\r\n\r\n $ sudo zypper ar -n openSUSE-13.2-Graphics \\\r\n   http://download.opensuse.org/repositories/graphics/openSUSE_13.2/ \\\r\n   graphics\r\n\r\n $ sudo zypper refresh\r\n\r\n $ sudo zypper install git cmake gcc gcc-c++ freeimage-devel \\\r\n   doxygen graphviz asciidoc lua-devel libqt4-devel freeglut-devel \\\r\n   rpmbuild\r\n\r\nMac OSX\r\n^^^^^^^\r\n\r\nOn Mac, you can install all of the necessary requirements using\r\nhttp://http://brew.sh/[HomeBrew]. On the command line, type the\r\nfollowing command:\r\n\r\n $ brew install pkg-config cmake libpng freeimage lua qt \\\r\n   docbook asciidoc graphviz doxygen\r\n\r\nCompiling the code\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nThe compilation of ARGoS is configured through CMake.\r\n\r\nFast compilation instructions\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nCompiling the ARGoS simulator\r\n++++++++++++++++++++++++++++++\r\n\r\n $ cd argos3\r\n $ mkdir build_simulator\r\n $ cd build_simulator\r\n $ cmake ../src\r\n $ make\r\n\r\nCompiling ARGoS for a robot\r\n++++++++++++++++++++++++++++\r\n\r\n $ cd argos3\r\n $ mkdir build_myrobot\r\n $ cd build_myrobot\r\n $ cmake -DARGOS_BUILD_FOR=myrobot ../src\r\n $ make\r\n\r\nCompiling the documentation\r\n+++++++++++++++++++++++++++\r\n\r\n $ cd argos3\r\n $ cd build_simulator # or 'cd build_myrobot'\r\n $ make doc\r\n\r\nARGoS sources under Eclipse\r\n+++++++++++++++++++++++++++\r\n\r\nTo use Eclipse with the ARGoS sources, you must have the\r\nhttp://www.eclipse.org/cdt/[CDT] installed. Optionally, you can also\r\ninstall http://cmakeed.sourceforge.net/[CMakeEd] to modify the\r\n+CMakeLists.txt+ files comfortably within Eclipse.   \r\n\r\nTo configure the ARGoS sources for Eclipse, it is better to avoid\r\ncompiling the code in a separate build directory (for more details, see\r\nhttp://www.vtk.org/Wiki/Eclipse_CDT4_Generator#Out-Of-Source_Builds[here]).\r\nThus, execute CMake as follows:  \r\n\r\n $ cd argos3\r\n $ cmake -G \"Eclipse CDT4 - Unix Makefiles\" src/\r\n\r\nNow open Eclipse. Click on _File_ -> _Import..._, select\r\n_Existing project into workspace_, and click on _Next_. Set the base +argos3+\r\ndirectory as the root directory in the dialog that appears. Click on _Next_\r\nand you're ready to go.\r\n\r\nAdvanced compilation configuration\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nThe compilation of ARGoS can be configured through a set of CMake options:\r\n\r\n[options=\"header\"]\r\n|====================================================================================================================\r\n| Variable                 | Type      | Meaning [default value]\r\n| +CMAKE_BUILD_TYPE+       | _STRING_  | Build type (+Debug+, +Release+, etc.) [empty]\r\n| +CMAKE_INSTALL_PREFIX+   | _STRING_  | Install prefix (+/usr+, +/usr/local+, etc.) [+/usr/local+]\r\n| +ARGOS_BUILD_FOR+        | _STRING_  | Target of compilation (+simulator+ or robot name) [+simulator+]\r\n| +ARGOS_BUILD_NATIVE+     | _BOOLEAN_ | Whether to use platform-specific instructions [+OFF+]\r\n| +ARGOS_THREADSAFE_LOG+   | _BOOLEAN_ | Use or not the thread-safe version of +LOG+/+LOGERR+. [+ON+]\r\n| +ARGOS_DYNAMIC_LOADING+  | _BOOLEAN_ | Compile (and use) dynamic loading facilities [+ON+]\r\n| +ARGOS_USE_DOUBLE+       | _BOOLEAN_ | Use +double+ (+ON+) or +float+ (+OFF+) [+ON+]\r\n| +ARGOS_DOCUMENTATION+    | _BOOLEAN_ | Create API documentation [+ON+]\r\n| +ARGOS_INSTALL_LDSOCONF+ | _BOOLEAN_ | Install the file +/etc/ld.so.conf/argos3.conf+ [+ON+ on Linux, +OFF+ on Mac]\r\n|====================================================================================================================\r\n\r\nYou can pass the wanted values from the command line. For instance, if you\r\nwanted to set explictly all the default values, when compiling on Linux you would write:\r\n\r\n $ cd argos3/build_simulator\r\n $ cmake -DCMAKE_BUILD_TYPE=Debug \\\r\n         -DCMAKE_INSTALL_PREFIX=/usr/local \\\r\n         -DARGOS_BUILD_FOR=simulator \\\r\n         -DARGOS_BUILD_NATIVE=OFF \\\r\n         -DARGOS_THREADSAFE_LOG=ON \\\r\n         -DARGOS_DYNAMIC_LOADING=ON \\\r\n         -DARGOS_USE_DOUBLE=ON \\\r\n         -DARGOS_DOCUMENTATION=ON \\\r\n         -DARGOS_INSTALL_LDSOCONF=ON \\\r\n         ../src\r\n\r\nIMPORTANT: When +ARGOS_BUILD_FOR+ is set to +simulator+, +ARGOS_THREADSAFE_LOG+\r\n           and +ARGOS_DYNAMIC_LOADING+ must be ON.\r\n\r\nIMPORTANT: If you want to install ARGoS without root privileges, remember to set\r\n           +ARGOS_INSTALL_LDSOCONF+ to +OFF+. Otherwise, installation will fail\r\n           midway.\r\n\r\nTIP: For production environments, it is recommended to compile ARGoS with\r\n     +CMAKE_BUILD_TYPE+ set to +Release+. If you want to debug ARGoS, it is\r\n     recommended to set +CMAKE_BUILD_TYPE+ to +Debug+. The other standard\r\n     settings (empty and +RelWithDebInfo+) are supported but should be avoided.\r\n\r\nTIP: If you want to squeeze maximum performance from ARGoS, along with compiling\r\n     with +CMAKE_BUILD_TYPE+ set to +Release+, you can also set +ARGOS_BUILD_NATIVE+\r\n     to +ON+. This setting instructs the compiler to use the compiler flags\r\n     +-march=native+ and +-mtune=native+. The code will run faster because you\r\n     use the entire instruction set of your processor, but the generated binaries\r\n     won't be portable to computers with different processors.\r\n\r\nUsing the ARGoS simulator from the source tree\r\n----------------------------------------------\r\n\r\nIMPORTANT: You can't install ARGoS system-wide and run the source version at the same time.\r\n           If you intend to run ARGoS from the sources, you must uninstall it from the\r\n           system.\r\n\r\nRunning the ARGoS simulator\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you don't want to install ARGoS on your system, you can run it from the sources\r\ntree. In the directory +build_simulator/+ you'll find a bash script called\r\n+setup_env.sh+. Executing this script, you configure the current environment to\r\nrun ARGoS:\r\n\r\n $ cd argos3\r\n $ cd build_simulator\r\n $ . setup_env.sh     # or 'source setup_env.sh'\r\n $ cd core\r\n $ ./argos3 -q all    # this shows all the plugins recognized by ARGoS\r\n\r\nIf you execute ARGoS with the graphical visualization, you'll notice that\r\nicons and textures are missing. This is normal, as ARGoS by default looks\r\nfor them in the default install location. To fix this, you need to edit\r\nthe default settings of the GUI.\r\n\r\nOn Linux, edit the file +$HOME/.config/Iridia-ULB/ARGoS.conf+ as follows:\r\n\r\n [MainWindow]\r\n #\r\n # other stuff\r\n #\r\n icon_dir=/PATH/TO/argos3/src/plugins/simulator/visualizations/qt-opengl/icons/\r\n texture_dir=/PATH/TO/argos3/src/plugins/simulator/visualizations/qt-opengl/textures/\r\n #\r\n # more stuff\r\n #\r\n\r\nOn Mac, write the following commands on the terminal window:\r\n\r\n $ defaults write be.ac.ulb.Iridia.ARGoS MainWindow.texture_dir -string \"/PATH/TO/argos3/src/plugins/simulator/visualizations/qt-opengl/textures/\"\r\n $ defaults write be.ac.ulb.Iridia.ARGoS MainWindow.icon_dir -string \"/PATH/TO/argos3/src/plugins/simulator/visualizations/qt-opengl/icons/\"\r\n $ killall -u YOURUSERNAME cfprefsd\r\n\r\nBe sure to substitute +/PATH/TO/+ with the correct path that contains the +argos3+\r\nfolder, and +YOURUSERNAME+ with your username as displayed on the terminal.\r\n\r\nDebugging the ARGoS simulator\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can debug the ARGoS code using +gdb+. Since the code in scattered across multiple\r\ndirectories, you need a +.gdbinit+ file. Luckily for you, this file is created\r\nautomatically when you compile ARGoS. To use it, you just need to remember to\r\nrun the ARGoS simulator from the +build_simulator/core/+ directory:\r\n\r\n $ cd argos3/build_simulator/core\r\n $ gdb ./argos3\r\n\r\nInstalling ARGoS from the compiled binaries\r\n--------------------------------------------\r\n\r\nTo install ARGoS after having compiled the sources, it is enough to write:\r\n\r\n $ cd argos3\r\n $ cd build_simulator # or 'cd build_myrobot'\r\n $ make doc           # documentation is required!\r\n $ sudo make install\r\n\r\nAlternatively, one can create a package. To build all the packages supported by\r\nyour system, run these commands:\r\n\r\n $ cd argos3\r\n $ git tag -a X.Y.Z-release # give the package a unique version\r\n                            # the format must be as shown\r\n                            # X       = version major\r\n                            # Y       = version minor\r\n                            # Z       = version patch\r\n                            # release = a textual label\r\n $ cd build_simulator       # or 'cd build_myrobot'\r\n $ cmake .                  # let CMake read the newly set tag\r\n $ make doc                 # documentation is required!\r\n $ make                     # compile the code\r\n $ sudo make package        # make the package\r\n\r\nThis typically creates a self-extracting .tar.gz archive, a .tar.bz2 archive,\r\na .zip archive, and a platform-specific archive (.deb, .rpm, or a MacOSX\r\npackage). You can determine which packages to create by setting the variables\r\n+CPACK_BINARY_DEB+, +CPACK_BINARY_RPM+, +CPACK_BINARY_STGZ+,\r\n+CPACK_BINARY_TBZ2+, +CPACK_BINARY_TGZ+, +CPACK_BINARY_TZ+.\r\n\r\nIMPORTANT: the creation of source packages through the command\r\n           +make package_source+ is not supported.\r\n\r\nAn easier option is to install ARGoS from a package distributed at\r\nhttp://www.argos-sim.info/download.php.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}